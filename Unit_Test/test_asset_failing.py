# Automatically generated by Pynguin.
import asset as module0


def test_case_0():
    try:
        var0 = None
        var1 = '!XTiZnu=PS`I\n'
        var2 = module0.Asset(var1)
        assert var2 is not None
        var3 = {var0, var2}
        var4 = {var3: var1, var3: var1}
    except BaseException:
        pass


def test_case_1():
    try:
        var0 = 2092
        var1 = ')tz &'
        var2 = module0.Asset(var0, var1)
        assert var2 is not None
        var3 = b'MCV\xa9\xf4m\xd6'
        var4 = {var3, var3}
        var5 = 2965
        var6 = module0.Asset(var4, var5)
        assert var6 is not None
        var7 = -1016
        var8 = {var3: var7, var3: var6, var4: var7}
    except BaseException:
        pass


def test_case_2():
    try:
        var0 = -1405.05
        var1 = {var0}
        var2 = module0.Asset(var1)
        assert var2 is not None
        var3 = 'dn"jkN\x0bk'
        var4 = module0.Asset(var3)
        assert var4 is not None
        var5 = module0.Asset(var4)
        assert var5 is not None
        var6 = False
        var7 = module0.Asset(var6)
        assert var7 is not None
        var8 = b'\xee'
        var9 = module0.Asset(var8)
        assert var9 is not None
        var10 = -609.4
        var11 = False
        var12 = {var10, var11, var10, var10}
        var13 = False
        var14 = [var12, var13, var12, var12]
        var15 = module0.Asset(var14)
        assert var15 is not None
        var16 = b'MCV\xa9\xf4m\xd6'
        var17 = {var16, var16}
        var18 = 2965
        var19 = module0.Asset(var17, var18)
        assert var19 is not None
        var20 = []
        var21 = 'eg]brR9'
        var22 = module0.Asset(var21)
        assert var22 is not None
        var23 = module0.Asset(var20, var22)
        assert var23 is not None
        var24 = {var21: var21, var21: var22}
        var25 = False
        var26 = module0.Asset(var24, var25)
        assert var26 is not None
        var27 = 1656.89
        var28 = -573.88
        var29 = var27, var28
        var30 = module0.Asset(var29)
        assert var30 is not None
        var31 = 2092
        var32 = ')tz &'
        var33 = module0.Asset(var31, var32)
        assert var33 is not None
        var34 = -1172.113988
        var35 = {var33: var32, var34: var31, var31: var32, var34: var34}
        var36 = module0.Asset(var35)
        assert var36 is not None
        var37 = False
        var38 = module0.Asset(var37)
        assert var38 is not None
        var39 = b'MCV\xa9\xf4m\xd6'
        var40 = {var39, var39}
        var41 = 2965
        var42 = module0.Asset(var40, var41)
        assert var42 is not None
        var43 = 2092
        var44 = ')tz &'
        var45 = module0.Asset(var43, var44)
        assert var45 is not None
        var46 = module0.Asset(var44)
        assert var46 is not None
        var47 = {var24: var1, var6: var25}
    except BaseException:
        pass


def test_case_3():
    try:
        var0 = -609.4
        var1 = False
        var2 = {var0, var1, var0, var0}
        var3 = False
        var4 = [var2, var3, var2, var2]
        var5 = module0.Asset(var4)
        assert var5 is not None
        var6 = -811
        var7 = {var2: var5}
    except BaseException:
        pass


def test_case_4():
    try:
        var0 = 2092
        var1 = ')tz &'
        var2 = module0.Asset(var0, var1)
        assert var2 is not None
        var3 = -1172.113988
        var4 = {var2: var1, var3: var0, var0: var1, var3: var3}
        var5 = module0.Asset(var4)
        assert var5 is not None
        var6 = []
        var7 = 'eg]brR9'
        var8 = module0.Asset(var7)
        assert var8 is not None
        var9 = module0.Asset(var6, var8)
        assert var9 is not None
        var10 = b'MCV\xa9\xf4m\xd6'
        var11 = {var10, var10}
        var12 = 2965
        var13 = module0.Asset(var11, var12)
        assert var13 is not None
        var14 = 2092
        var15 = ')tz &'
        var16 = module0.Asset(var14, var15)
        assert var16 is not None
        var17 = module0.Asset(var15)
        assert var17 is not None
        var18 = 2092
        var19 = ')tz &'
        var20 = module0.Asset(var18, var19)
        assert var20 is not None
        var21 = '[He;'
        var22 = {var19: var20, var21: var18, var19: var20}
        var23 = module0.Asset(var22, var20)
        assert var23 is not None
        var24 = 2092
        var25 = ')tz &'
        var26 = module0.Asset(var24, var25)
        assert var26 is not None
        var27 = -1172.113988
        var28 = {var26: var25, var27: var24, var24: var25, var27: var27}
        var29 = module0.Asset(var28)
        assert var29 is not None
        var30 = b'\x80\x8a'
        var31 = module0.Asset(var30)
        assert var31 is not None
        var32 = b'MCV\xa9\xf4m\xd6'
        var33 = {var32, var32}
        var34 = 2965
        var35 = module0.Asset(var33, var34)
        assert var35 is not None
        var36 = {var28: var4, var17: var21, var13: var10, var6: var5}
    except BaseException:
        pass


def test_case_5():
    try:
        var0 = 2092
        var1 = ')tz &'
        var2 = module0.Asset(var0, var1)
        assert var2 is not None
        var3 = -1172.113988
        var4 = {var2: var1, var3: var0, var0: var1, var3: var3}
        var5 = module0.Asset(var4)
        assert var5 is not None
        var6 = b'\x80\x8a'
        var7 = module0.Asset(var6)
        assert var7 is not None
        var8 = False
        var9 = module0.Asset(var8)
        assert var9 is not None
        var10 = b'\x011\x9e\xaeUe\x910\xf0\xfc\xd7\xde3\x17'
        var11 = var10, var8, var4, var5
        var12 = []
        var13 = {var12, var12, var9}
    except BaseException:
        pass
