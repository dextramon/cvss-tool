# Automatically generated by Pynguin.
import pytest
import vulnerability as module0


def test_case_0():
    try:
        var0 = module0.Vulnerability()
        assert var0 is not None
        var1 = var0.get_asset()
        assert var1 == 'Unknown'
        var2 = var0.get_name()
        assert var2 == 'Unknown'
        var3 = module0.Vulnerability()
        assert var3 is not None
        var4 = var3.get_asset()
        assert var4 == 'Unknown'
        var5 = "u3$;EA;'V\t"
        var6 = var0.set_asset(var5)
        assert var6 is None
        var7 = module0.Vulnerability()
        assert var7 is not None
        var8 = var7.get_asset()
        assert var8 == 'Unknown'
        var9 = var7.get_name()
        assert var9 == 'Unknown'
        var10 = var7.get_vector()
        assert var10 == 'CVSS:3.1/AV:None/AC:None/PR:None/UI:None/S:None/C:None/I:None/A:None/E:X/RL:X/RC:X/CR:X/IR:X/AR:X/MAV:X/MAC:X/MPR:X/MUI:X/MS:X/MC:X/MI:X/MA:X'
        var11 = module0.Vulnerability()
        assert var11 is not None
        var12 = var11.get_temp_vector()
        assert var12 == 'E:X/RL:X/RC:X'
        var13 = module0.Vulnerability()
        assert var13 is not None
        var14 = var13.get_asset()
        assert var14 == 'Unknown'
        var15 = module0.Vulnerability()
        assert var15 is not None
        var16 = var15.get_asset()
        assert var16 == 'Unknown'
        var17 = None
        var18 = {var15: var17, var17: var16, var15: var16}
        var19 = '8g~Pxy4pN69y=s'
        var20 = {var16, var19}
        var21 = var18, var15, var20
        var22 = var15.set_asset(var21)
        assert var22 is None
        var23 = 'Yh+pe0^*b.J\\vk_ei0\r'
        var24 = module0.round_up(var23)
    except BaseException:
        pass


def test_case_1():
    try:
        var0 = module0.Vulnerability()
        assert var0 is not None
        var1 = var0.get_asset()
        assert var1 == 'Unknown'
        var2 = None
        var3 = {var0: var2, var2: var1, var0: var1}
        var4 = '8g~Pxy4pN69y=s'
        var5 = {var1, var4}
        var6 = var3, var0, var5
        var7 = var0.set_asset(var6)
        assert var7 is None
        var8 = module0.Vulnerability()
        assert var8 is not None
        var9 = var8.get_temp_vector()
        assert var9 == 'E:X/RL:X/RC:X'
        var10 = module0.Vulnerability()
        assert var10 is not None
        var11 = var10.get_asset()
        assert var11 == 'Unknown'
        var12 = var10.get_name()
        assert var12 == 'Unknown'
        var13 = var10.get_vector()
        assert var13 == 'CVSS:3.1/AV:None/AC:None/PR:None/UI:None/S:None/C:None/I:None/A:None/E:X/RL:X/RC:X/CR:X/IR:X/AR:X/MAV:X/MAC:X/MPR:X/MUI:X/MS:X/MC:X/MI:X/MA:X'
        var14 = -2037
        var15 = module0.round_up(var14)
        assert var15 == pytest.approx(-2037.0, abs=0.01, rel=0.01)
        var16 = module0.Vulnerability()
        assert var16 is not None
        var17 = var16.get_asset()
        assert var17 == 'Unknown'
        var18 = var16.get_name()
        assert var18 == 'Unknown'
        var19 = var16.get_vector()
        assert var19 == 'CVSS:3.1/AV:None/AC:None/PR:None/UI:None/S:None/C:None/I:None/A:None/E:X/RL:X/RC:X/CR:X/IR:X/AR:X/MAV:X/MAC:X/MPR:X/MUI:X/MS:X/MC:X/MI:X/MA:X'
        var20 = module0.Vulnerability()
        assert var20 is not None
        var21 = var20.get_temp_vector()
        assert var21 == 'E:X/RL:X/RC:X'
        var22 = module0.Vulnerability()
        assert var22 is not None
        var23 = module0.Vulnerability()
        assert var23 is not None
        var24 = var23.get_env_vector()
        assert var24 == 'CR:X/IR:X/AR:X/MAV:X/MAC:X/MPR:X/MUI:X/MS:X/MC:X/MI:X/MA:X'
        var25 = module0.Vulnerability()
        assert var25 is not None
        var26 = var25.get_asset()
        assert var26 == 'Unknown'
        var27 = var25.get_name()
        assert var27 == 'Unknown'
        var28 = module0.Vulnerability()
        assert var28 is not None
        var29 = var28.get_asset()
        assert var29 == 'Unknown'
        var30 = "u3$;EA;'V\t"
        var31 = var25.set_asset(var30)
        assert var31 is None
        var32 = module0.Vulnerability()
        assert var32 is not None
        var33 = var32.get_asset()
        assert var33 == 'Unknown'
        var34 = var32.get_name()
        assert var34 == 'Unknown'
        var35 = var32.get_vector()
        assert var35 == 'CVSS:3.1/AV:None/AC:None/PR:None/UI:None/S:None/C:None/I:None/A:None/E:X/RL:X/RC:X/CR:X/IR:X/AR:X/MAV:X/MAC:X/MPR:X/MUI:X/MS:X/MC:X/MI:X/MA:X'
        var36 = var32.get_env_score()
        assert var36 is None
        var37 = var10.set_vector(var2)
    except BaseException:
        pass


def test_case_2():
    try:
        var0 = module0.Vulnerability()
        assert var0 is not None
        var1 = var0.get_temp_vector()
        assert var1 == 'E:X/RL:X/RC:X'
        var2 = module0.Vulnerability()
        assert var2 is not None
        var3 = module0.Vulnerability()
        assert var3 is not None
        var4 = var3.get_temp_vector()
        assert var4 == 'E:X/RL:X/RC:X'
        var5 = module0.Vulnerability()
        assert var5 is not None
        var6 = var5.get_asset()
        assert var6 == 'Unknown'
        var7 = var5.get_name()
        assert var7 == 'Unknown'
        var8 = module0.Vulnerability()
        assert var8 is not None
        var9 = var8.get_asset()
        assert var9 == 'Unknown'
        var10 = "u3$;EA;'V\t"
        var11 = var5.set_asset(var10)
        assert var11 is None
        var12 = ''
        var13 = [var8, var12, var8]
        var14 = module0.Vulnerability()
        assert var14 is not None
        var15 = var14.get_metric(var13)
    except BaseException:
        pass


def test_case_3():
    try:
        var0 = module0.Vulnerability()
        assert var0 is not None
        var1 = var0.get_asset()
        assert var1 == 'Unknown'
        var2 = var0.get_name()
        assert var2 == 'Unknown'
        var3 = module0.Vulnerability()
        assert var3 is not None
        var4 = var3.get_asset()
        assert var4 == 'Unknown'
        var5 = "u3$;EA;'V\t"
        var6 = var0.set_asset(var5)
        assert var6 is None
        var7 = module0.Vulnerability()
        assert var7 is not None
        var8 = var7.get_asset()
        assert var8 == 'Unknown'
        var9 = module0.Vulnerability()
        assert var9 is not None
        var10 = var9.get_temp_vector()
        assert var10 == 'E:X/RL:X/RC:X'
        var11 = module0.Vulnerability()
        assert var11 is not None
        var12 = var11.get_asset()
        assert var12 == 'Unknown'
        var13 = var11.get_name()
        assert var13 == 'Unknown'
        var14 = var11.get_vector()
        assert var14 == 'CVSS:3.1/AV:None/AC:None/PR:None/UI:None/S:None/C:None/I:None/A:None/E:X/RL:X/RC:X/CR:X/IR:X/AR:X/MAV:X/MAC:X/MPR:X/MUI:X/MS:X/MC:X/MI:X/MA:X'
        var15 = module0.Vulnerability()
        assert var15 is not None
        var16 = var15.get_asset()
        assert var16 == 'Unknown'
        var17 = None
        var18 = {var15: var17, var17: var16, var15: var16}
        var19 = '8g~Pxy4pN69y=s'
        var20 = {var16, var19}
        var21 = var18, var15, var20
        var22 = var15.set_asset(var21)
        assert var22 is None
        var23 = module0.Vulnerability()
        assert var23 is not None
        var24 = var23.get_asset()
        assert var24 == 'Unknown'
        var25 = var23.get_name()
        assert var25 == 'Unknown'
        var26 = module0.Vulnerability()
        assert var26 is not None
        var27 = var26.get_env_vector()
        assert var27 == 'CR:X/IR:X/AR:X/MAV:X/MAC:X/MPR:X/MUI:X/MS:X/MC:X/MI:X/MA:X'
        var28 = module0.Vulnerability()
        assert var28 is not None
        var29 = var28.get_env_vector()
        assert var29 == 'CR:X/IR:X/AR:X/MAV:X/MAC:X/MPR:X/MUI:X/MS:X/MC:X/MI:X/MA:X'
        var30 = 2542
        var31 = var28.set_name(var30)
        assert var31 is None
        var32 = [var24, var16, var16]
        var33 = var15.set_vector(var32)
    except BaseException:
        pass


def test_case_4():
    try:
        var0 = module0.Vulnerability()
        assert var0 is not None
        var1 = var0.get_asset()
        assert var1 == 'Unknown'
        var2 = var0.get_name()
        assert var2 == 'Unknown'
        var3 = module0.Vulnerability()
        assert var3 is not None
        var4 = var3.get_asset()
        assert var4 == 'Unknown'
        var5 = var3.get_name()
        assert var5 == 'Unknown'
        var6 = module0.Vulnerability()
        assert var6 is not None
        var7 = var6.get_asset()
        assert var7 == 'Unknown'
        var8 = "u3$;EA;'V\t"
        var9 = var3.set_asset(var8)
        assert var9 is None
        var10 = module0.Vulnerability()
        assert var10 is not None
        var11 = var10.get_env_vector()
        assert var11 == 'CR:X/IR:X/AR:X/MAV:X/MAC:X/MPR:X/MUI:X/MS:X/MC:X/MI:X/MA:X'
        var12 = 2542
        var13 = var10.set_name(var12)
        assert var13 is None
        var14 = module0.Vulnerability()
        assert var14 is not None
        var15 = var14.get_asset()
        assert var15 == 'Unknown'
        var16 = var14.get_name()
        assert var16 == 'Unknown'
        var17 = var14.get_vector()
        assert var17 == 'CVSS:3.1/AV:None/AC:None/PR:None/UI:None/S:None/C:None/I:None/A:None/E:X/RL:X/RC:X/CR:X/IR:X/AR:X/MAV:X/MAC:X/MPR:X/MUI:X/MS:X/MC:X/MI:X/MA:X'
        var18 = '*(8:CD\t5<9&\nhWC<]'
        var19 = {var7: var5, var18: var5, var0: var0}
        var20 = '~Vq=5R\r'
        var21 = var6.set_metric(var19, var20)
    except BaseException:
        pass


def test_case_5():
    try:
        var0 = module0.Vulnerability()
        assert var0 is not None
        var1 = var0.get_asset()
        assert var1 == 'Unknown'
        var2 = var0.get_name()
        assert var2 == 'Unknown'
        var3 = var0.get_vector()
        assert var3 == 'CVSS:3.1/AV:None/AC:None/PR:None/UI:None/S:None/C:None/I:None/A:None/E:X/RL:X/RC:X/CR:X/IR:X/AR:X/MAV:X/MAC:X/MPR:X/MUI:X/MS:X/MC:X/MI:X/MA:X'
        var4 = -2037
        var5 = module0.round_up(var4)
        assert var5 == pytest.approx(-2037.0, abs=0.01, rel=0.01)
        var6 = module0.Vulnerability()
        assert var6 is not None
        var7 = var6.get_asset()
        assert var7 == 'Unknown'
        var8 = var6.get_name()
        assert var8 == 'Unknown'
        var9 = var6.get_vector()
        assert var9 == 'CVSS:3.1/AV:None/AC:None/PR:None/UI:None/S:None/C:None/I:None/A:None/E:X/RL:X/RC:X/CR:X/IR:X/AR:X/MAV:X/MAC:X/MPR:X/MUI:X/MS:X/MC:X/MI:X/MA:X'
        var10 = var6.get_env_score()
        assert var10 is None
        var11 = module0.Vulnerability()
        assert var11 is not None
        var12 = var11.get_asset()
        assert var12 == 'Unknown'
        var13 = var11.get_name()
        assert var13 == 'Unknown'
        var14 = module0.Vulnerability()
        assert var14 is not None
        var15 = var14.get_asset()
        assert var15 == 'Unknown'
        var16 = "u3$;EA;'V\t"
        var17 = var11.set_asset(var16)
        assert var17 is None
        var18 = module0.Vulnerability()
        assert var18 is not None
        var19 = var18.get_asset()
        assert var19 == 'Unknown'
        var20 = var18.get_name()
        assert var20 == 'Unknown'
        var21 = b'\xd4'
        var22 = module0.Vulnerability()
        assert var22 is not None
        var23 = var22.set_asset(var21)
        assert var23 is None
        var24 = module0.Vulnerability()
        assert var24 is not None
        var25 = var24.get_asset()
        assert var25 == 'Unknown'
        var26 = var24.get_name()
        assert var26 == 'Unknown'
        var27 = var24.get_vector()
        assert var27 == 'CVSS:3.1/AV:None/AC:None/PR:None/UI:None/S:None/C:None/I:None/A:None/E:X/RL:X/RC:X/CR:X/IR:X/AR:X/MAV:X/MAC:X/MPR:X/MUI:X/MS:X/MC:X/MI:X/MA:X'
        var28 = module0.Vulnerability()
        assert var28 is not None
        var29 = var28.get_temp_vector()
        assert var29 == 'E:X/RL:X/RC:X'
        var30 = module0.Vulnerability()
        assert var30 is not None
        var31 = var30.get_env_vector()
        assert var31 == 'CR:X/IR:X/AR:X/MAV:X/MAC:X/MPR:X/MUI:X/MS:X/MC:X/MI:X/MA:X'
        var32 = module0.Vulnerability()
        assert var32 is not None
        var33 = var32.get_asset()
        assert var33 == 'Unknown'
        var34 = None
        var35 = {var32: var34, var34: var33, var32: var33}
        var36 = '8g~Pxy4pN69y=s'
        var37 = {var33, var36}
        var38 = var35, var32, var37
        var39 = var32.set_asset(var38)
        assert var39 is None
        var40 = "c\\fMQCS\\(':E-=Gg"
        var41 = var14.get_metric(var40)
    except BaseException:
        pass


def test_case_6():
    try:
        var0 = module0.Vulnerability()
        assert var0 is not None
        var1 = var0.get_asset()
        assert var1 == 'Unknown'
        var2 = var0.get_name()
        assert var2 == 'Unknown'
        var3 = var0.get_vector()
        assert var3 == 'CVSS:3.1/AV:None/AC:None/PR:None/UI:None/S:None/C:None/I:None/A:None/E:X/RL:X/RC:X/CR:X/IR:X/AR:X/MAV:X/MAC:X/MPR:X/MUI:X/MS:X/MC:X/MI:X/MA:X'
        var4 = -2037
        var5 = module0.round_up(var4)
        assert var5 == pytest.approx(-2037.0, abs=0.01, rel=0.01)
        var6 = module0.Vulnerability()
        assert var6 is not None
        var7 = var6.get_asset()
        assert var7 == 'Unknown'
        var8 = var6.get_name()
        assert var8 == 'Unknown'
        var9 = module0.Vulnerability()
        assert var9 is not None
        var10 = var9.get_asset()
        assert var10 == 'Unknown'
        var11 = "u3$;EA;'V\t"
        var12 = var6.set_asset(var11)
        assert var12 is None
        var13 = module0.Vulnerability()
        assert var13 is not None
        var14 = var13.get_asset()
        assert var14 == 'Unknown'
        var15 = module0.Vulnerability()
        assert var15 is not None
        var16 = var15.get_env_vector()
        assert var16 == 'CR:X/IR:X/AR:X/MAV:X/MAC:X/MPR:X/MUI:X/MS:X/MC:X/MI:X/MA:X'
        var17 = module0.Vulnerability()
        assert var17 is not None
        var18 = var17.get_asset()
        assert var18 == 'Unknown'
        var19 = None
        var20 = {var17: var19, var19: var18, var17: var18}
        var21 = '8g~Pxy4pN69y=s'
        var22 = {var18, var21}
        var23 = var20, var17, var22
        var24 = var17.set_asset(var23)
        assert var24 is None
        var25 = module0.Vulnerability()
        assert var25 is not None
        var26 = var25.set_metric(var22, var9)
    except BaseException:
        pass


def test_case_7():
    try:
        var0 = module0.Vulnerability()
        assert var0 is not None
        var1 = var0.get_asset()
        assert var1 == 'Unknown'
        var2 = var0.get_name()
        assert var2 == 'Unknown'
        var3 = var0.get_vector()
        assert var3 == 'CVSS:3.1/AV:None/AC:None/PR:None/UI:None/S:None/C:None/I:None/A:None/E:X/RL:X/RC:X/CR:X/IR:X/AR:X/MAV:X/MAC:X/MPR:X/MUI:X/MS:X/MC:X/MI:X/MA:X'
        var4 = var0.get_env_score()
        assert var4 is None
        var5 = module0.Vulnerability()
        assert var5 is not None
        var6 = var5.get_temp_vector()
        assert var6 == 'E:X/RL:X/RC:X'
        var7 = module0.Vulnerability()
        assert var7 is not None
        var8 = module0.Vulnerability()
        assert var8 is not None
        var9 = var8.get_asset()
        assert var9 == 'Unknown'
        var10 = var8.get_name()
        assert var10 == 'Unknown'
        var11 = module0.Vulnerability()
        assert var11 is not None
        var12 = var11.get_asset()
        assert var12 == 'Unknown'
        var13 = None
        var14 = {var11: var13, var13: var12, var11: var12}
        var15 = '8g~Pxy4pN69y=s'
        var16 = {var12, var15}
        var17 = var14, var11, var16
        var18 = var11.set_asset(var17)
        assert var18 is None
        var19 = module0.Vulnerability()
        assert var19 is not None
        var20 = var19.get_env_vector()
        assert var20 == 'CR:X/IR:X/AR:X/MAV:X/MAC:X/MPR:X/MUI:X/MS:X/MC:X/MI:X/MA:X'
        var21 = 2542
        var22 = var19.set_name(var21)
        assert var22 is None
        var23 = b'\xd4'
        var24 = module0.Vulnerability()
        assert var24 is not None
        var25 = var24.set_asset(var23)
        assert var25 is None
        var26 = module0.Vulnerability()
        assert var26 is not None
        var27 = var26.get_asset()
        assert var27 == 'Unknown'
        var28 = var26.get_name()
        assert var28 == 'Unknown'
        var29 = module0.Vulnerability()
        assert var29 is not None
        var30 = var29.get_asset()
        assert var30 == 'Unknown'
        var31 = "u3$;EA;'V\t"
        var32 = var26.set_asset(var31)
        assert var32 is None
        var33 = -3098
        var34 = var29.set_vector(var33)
    except BaseException:
        pass


def test_case_8():
    try:
        var0 = module0.Vulnerability()
        assert var0 is not None
        var1 = var0.get_asset()
        assert var1 == 'Unknown'
        var2 = var0.get_name()
        assert var2 == 'Unknown'
        var3 = module0.Vulnerability()
        assert var3 is not None
        var4 = var3.get_asset()
        assert var4 == 'Unknown'
        var5 = var3.get_name()
        assert var5 == 'Unknown'
        var6 = module0.Vulnerability()
        assert var6 is not None
        var7 = var6.get_asset()
        assert var7 == 'Unknown'
        var8 = "u3$;EA;'V\t"
        var9 = var3.set_asset(var8)
        assert var9 is None
        var10 = module0.Vulnerability()
        assert var10 is not None
        var11 = var10.get_asset()
        assert var11 == 'Unknown'
        var12 = var10.get_name()
        assert var12 == 'Unknown'
        var13 = var10.get_vector()
        assert var13 == 'CVSS:3.1/AV:None/AC:None/PR:None/UI:None/S:None/C:None/I:None/A:None/E:X/RL:X/RC:X/CR:X/IR:X/AR:X/MAV:X/MAC:X/MPR:X/MUI:X/MS:X/MC:X/MI:X/MA:X'
        var14 = module0.Vulnerability()
        assert var14 is not None
        var15 = var14.get_asset()
        assert var15 == 'Unknown'
        var16 = module0.Vulnerability()
        assert var16 is not None
        var17 = var16.get_temp_vector()
        assert var17 == 'E:X/RL:X/RC:X'
        var18 = module0.Vulnerability()
        assert var18 is not None
        var19 = var18.get_env_vector()
        assert var19 == 'CR:X/IR:X/AR:X/MAV:X/MAC:X/MPR:X/MUI:X/MS:X/MC:X/MI:X/MA:X'
        var20 = 2542
        var21 = var18.set_name(var20)
        assert var21 is None
        var22 = -701.4
        var23 = var10.set_vector(var22)
    except BaseException:
        pass


def test_case_9():
    try:
        var0 = module0.Vulnerability()
        assert var0 is not None
        var1 = var0.get_asset()
        assert var1 == 'Unknown'
        var2 = module0.Vulnerability()
        assert var2 is not None
        var3 = var2.get_env_vector()
        assert var3 == 'CR:X/IR:X/AR:X/MAV:X/MAC:X/MPR:X/MUI:X/MS:X/MC:X/MI:X/MA:X'
        var4 = 2542
        var5 = var2.set_name(var4)
        assert var5 is None
        var6 = var0.get_base_score()
        assert var6 is None
        var7 = module0.Vulnerability()
        assert var7 is not None
        var8 = var7.get_asset()
        assert var8 == 'Unknown'
        var9 = var7.get_name()
        assert var9 == 'Unknown'
        var10 = var7.get_vector()
        assert var10 == 'CVSS:3.1/AV:None/AC:None/PR:None/UI:None/S:None/C:None/I:None/A:None/E:X/RL:X/RC:X/CR:X/IR:X/AR:X/MAV:X/MAC:X/MPR:X/MUI:X/MS:X/MC:X/MI:X/MA:X'
        var11 = module0.Vulnerability()
        assert var11 is not None
        var12 = var11.get_asset()
        assert var12 == 'Unknown'
        var13 = var11.get_name()
        assert var13 == 'Unknown'
        var14 = var11.get_vector()
        assert var14 == 'CVSS:3.1/AV:None/AC:None/PR:None/UI:None/S:None/C:None/I:None/A:None/E:X/RL:X/RC:X/CR:X/IR:X/AR:X/MAV:X/MAC:X/MPR:X/MUI:X/MS:X/MC:X/MI:X/MA:X'
        var15 = False
        var16 = module0.round_up(var15)
        assert var16 == pytest.approx(0.0, abs=0.01, rel=0.01)
        var17 = module0.Vulnerability()
        assert var17 is not None
        var18 = var17.get_asset()
        assert var18 == 'Unknown'
        var19 = var17.get_name()
        assert var19 == 'Unknown'
        var20 = var17.get_vector()
        assert var20 == 'CVSS:3.1/AV:None/AC:None/PR:None/UI:None/S:None/C:None/I:None/A:None/E:X/RL:X/RC:X/CR:X/IR:X/AR:X/MAV:X/MAC:X/MPR:X/MUI:X/MS:X/MC:X/MI:X/MA:X'
        var21 = -2037
        var22 = module0.round_up(var21)
        assert var22 == pytest.approx(-2037.0, abs=0.01, rel=0.01)
        var23 = module0.Vulnerability()
        assert var23 is not None
        var24 = var23.get_asset()
        assert var24 == 'Unknown'
        var25 = var23.get_name()
        assert var25 == 'Unknown'
        var26 = module0.Vulnerability()
        assert var26 is not None
        var27 = var26.get_env_vector()
        assert var27 == 'CR:X/IR:X/AR:X/MAV:X/MAC:X/MPR:X/MUI:X/MS:X/MC:X/MI:X/MA:X'
        var28 = module0.Vulnerability()
        assert var28 is not None
        var29 = var28.get_asset()
        assert var29 == 'Unknown'
        var30 = None
        var31 = {var28: var30, var30: var29, var28: var29}
        var32 = '8g~Pxy4pN69y=s'
        var33 = {var29, var32}
        var34 = var31, var28, var33
        var35 = var28.set_asset(var34)
        assert var35 is None
        var36 = b'\xc3mc\xe3\x88\x87Z\t3\xe4\x93\xa6\xee\xc5'
        var37 = var23.set_vector(var36)
    except BaseException:
        pass


def test_case_10():
    try:
        var0 = module0.Vulnerability()
        assert var0 is not None
        var1 = var0.get_env_vector()
        assert var1 == 'CR:X/IR:X/AR:X/MAV:X/MAC:X/MPR:X/MUI:X/MS:X/MC:X/MI:X/MA:X'
        var2 = 2542
        var3 = var0.set_name(var2)
        assert var3 is None
        var4 = module0.Vulnerability()
        assert var4 is not None
        var5 = var4.get_asset()
        assert var5 == 'Unknown'
        var6 = var4.get_name()
        assert var6 == 'Unknown'
        var7 = None
        var8 = var0.get_metric(var7)
    except BaseException:
        pass


def test_case_11():
    try:
        var0 = module0.Vulnerability()
        assert var0 is not None
        var1 = var0.get_asset()
        assert var1 == 'Unknown'
        var2 = module0.Vulnerability()
        assert var2 is not None
        var3 = var2.get_env_vector()
        assert var3 == 'CR:X/IR:X/AR:X/MAV:X/MAC:X/MPR:X/MUI:X/MS:X/MC:X/MI:X/MA:X'
        var4 = 2542
        var5 = var2.set_name(var4)
        assert var5 is None
        var6 = var0.get_base_score()
        assert var6 is None
        var7 = b'\x8e\x90N\xe1Q'
        var8 = var2.set_vector(var7)
    except BaseException:
        pass


def test_case_12():
    try:
        var0 = module0.Vulnerability()
        assert var0 is not None
        var1 = var0.get_temp_vector()
        assert var1 == 'E:X/RL:X/RC:X'
        var2 = None
        var3 = var0.set_vector(var2)
    except BaseException:
        pass


def test_case_13():
    try:
        var0 = module0.Vulnerability()
        assert var0 is not None
        var1 = var0.get_temp_score()
        assert var1 is None
        var2 = module0.Vulnerability()
        assert var2 is not None
        var3 = var2.get_asset()
        assert var3 == 'Unknown'
        var4 = module0.Vulnerability()
        assert var4 is not None
        var5 = var4.get_env_vector()
        assert var5 == 'CR:X/IR:X/AR:X/MAV:X/MAC:X/MPR:X/MUI:X/MS:X/MC:X/MI:X/MA:X'
        var6 = 2542
        var7 = var4.set_name(var6)
        assert var7 is None
        var8 = var2.get_base_score()
        assert var8 is None
        var9 = module0.Vulnerability()
        assert var9 is not None
        var10 = var9.get_asset()
        assert var10 == 'Unknown'
        var11 = module0.Vulnerability()
        assert var11 is not None
        var12 = var11.get_asset()
        assert var12 == 'Unknown'
        var13 = var11.get_name()
        assert var13 == 'Unknown'
        var14 = var11.get_vector()
        assert var14 == 'CVSS:3.1/AV:None/AC:None/PR:None/UI:None/S:None/C:None/I:None/A:None/E:X/RL:X/RC:X/CR:X/IR:X/AR:X/MAV:X/MAC:X/MPR:X/MUI:X/MS:X/MC:X/MI:X/MA:X'
        var15 = False
        var16 = module0.round_up(var15)
        assert var16 == pytest.approx(0.0, abs=0.01, rel=0.01)
        var17 = module0.Vulnerability()
        assert var17 is not None
        var18 = var17.get_vector()
        assert var18 == 'CVSS:3.1/AV:None/AC:None/PR:None/UI:None/S:None/C:None/I:None/A:None/E:X/RL:X/RC:X/CR:X/IR:X/AR:X/MAV:X/MAC:X/MPR:X/MUI:X/MS:X/MC:X/MI:X/MA:X'
        var19 = module0.Vulnerability()
        assert var19 is not None
        var20 = var19.get_asset()
        assert var20 == 'Unknown'
        var21 = None
        var22 = {var19: var21, var21: var20, var19: var20}
        var23 = '8g~Pxy4pN69y=s'
        var24 = {var20, var23}
        var25 = var22, var19, var24
        var26 = var19.set_asset(var25)
        assert var26 is None
        var27 = var19.get_base_vector()
        assert var27 == 'AV:None/AC:None/PR:None/UI:None/S:None/C:None/I:None/A:None'
        var28 = b'\xd4'
        var29 = module0.Vulnerability()
        assert var29 is not None
        var30 = var29.set_asset(var28)
        assert var30 is None
        var31 = module0.Vulnerability()
        assert var31 is not None
        var32 = module0.Vulnerability()
        assert var32 is not None
        var33 = var32.get_asset()
        assert var33 == 'Unknown'
        var34 = var32.get_name()
        assert var34 == 'Unknown'
        var35 = var32.get_vector()
        assert var35 == 'CVSS:3.1/AV:None/AC:None/PR:None/UI:None/S:None/C:None/I:None/A:None/E:X/RL:X/RC:X/CR:X/IR:X/AR:X/MAV:X/MAC:X/MPR:X/MUI:X/MS:X/MC:X/MI:X/MA:X'
        var36 = var32.get_env_score()
        assert var36 is None
        var37 = True
        var38 = module0.Vulnerability()
        assert var38 is not None
        var39 = var38.set_vector(var37)
    except BaseException:
        pass


def test_case_14():
    try:
        var0 = module0.Vulnerability()
        assert var0 is not None
        var1 = ''
        var2 = var0.get_metric(var1)
    except BaseException:
        pass


def test_case_15():
    try:
        var0 = None
        var1 = ''
        var2 = var0, var1, var1, var0
        var3 = {var2: var0, var0: var0, var0: var0, var2: var2}
        var4 = module0.round_up(var3)
    except BaseException:
        pass


def test_case_16():
    try:
        var0 = module0.Vulnerability()
        assert var0 is not None
        var1 = var0.get_env_vector()
        assert var1 == 'CR:X/IR:X/AR:X/MAV:X/MAC:X/MPR:X/MUI:X/MS:X/MC:X/MI:X/MA:X'
        var2 = 2542
        var3 = var0.set_name(var2)
        assert var3 is None
        var4 = module0.Vulnerability()
        assert var4 is not None
        var5 = var4.get_asset()
        assert var5 == 'Unknown'
        var6 = var4.get_name()
        assert var6 == 'Unknown'
        var7 = var4.get_vector()
        assert var7 == 'CVSS:3.1/AV:None/AC:None/PR:None/UI:None/S:None/C:None/I:None/A:None/E:X/RL:X/RC:X/CR:X/IR:X/AR:X/MAV:X/MAC:X/MPR:X/MUI:X/MS:X/MC:X/MI:X/MA:X'
        var8 = False
        var9 = module0.round_up(var8)
        assert var9 == pytest.approx(0.0, abs=0.01, rel=0.01)
        var10 = -1339.302
        var11 = var0.get_metric(var10)
    except BaseException:
        pass


def test_case_17():
    try:
        var0 = module0.Vulnerability()
        assert var0 is not None
        var1 = var0.get_asset()
        assert var1 == 'Unknown'
        var2 = var0.get_name()
        assert var2 == 'Unknown'
        var3 = var0.get_vector()
        assert var3 == 'CVSS:3.1/AV:None/AC:None/PR:None/UI:None/S:None/C:None/I:None/A:None/E:X/RL:X/RC:X/CR:X/IR:X/AR:X/MAV:X/MAC:X/MPR:X/MUI:X/MS:X/MC:X/MI:X/MA:X'
        var4 = var0.get_env_score()
        assert var4 is None
        var5 = False
        var6 = {var0: var5}
        var7 = var0.set_vector(var6)
    except BaseException:
        pass


def test_case_18():
    try:
        var0 = module0.Vulnerability()
        assert var0 is not None
        var1 = var0.get_asset()
        assert var1 == 'Unknown'
        var2 = None
        var3 = {var0: var2, var2: var1, var0: var1}
        var4 = '8g~Pxy4pN69y=s'
        var5 = {var1, var4}
        var6 = var3, var0, var5
        var7 = var0.set_asset(var6)
        assert var7 is None
        var8 = var0.get_metric(var0)
    except BaseException:
        pass


def test_case_19():
    try:
        var0 = module0.Vulnerability()
        assert var0 is not None
        var1 = var0.get_asset()
        assert var1 == 'Unknown'
        var2 = var0.get_name()
        assert var2 == 'Unknown'
        var3 = var0.get_vector()
        assert var3 == 'CVSS:3.1/AV:None/AC:None/PR:None/UI:None/S:None/C:None/I:None/A:None/E:X/RL:X/RC:X/CR:X/IR:X/AR:X/MAV:X/MAC:X/MPR:X/MUI:X/MS:X/MC:X/MI:X/MA:X'
        var4 = module0.Vulnerability()
        assert var4 is not None
        var5 = var4.get_env_vector()
        assert var5 == 'CR:X/IR:X/AR:X/MAV:X/MAC:X/MPR:X/MUI:X/MS:X/MC:X/MI:X/MA:X'
        var6 = 2542
        var7 = var4.set_name(var6)
        assert var7 is None
        var8 = module0.Vulnerability()
        assert var8 is not None
        var9 = var8.get_vector()
        assert var9 == 'CVSS:3.1/AV:None/AC:None/PR:None/UI:None/S:None/C:None/I:None/A:None/E:X/RL:X/RC:X/CR:X/IR:X/AR:X/MAV:X/MAC:X/MPR:X/MUI:X/MS:X/MC:X/MI:X/MA:X'
        var10 = var8.get_base_vector()
        assert var10 == 'AV:None/AC:None/PR:None/UI:None/S:None/C:None/I:None/A:None'
        var11 = module0.Vulnerability()
        assert var11 is not None
        var12 = var11.get_asset()
        assert var12 == 'Unknown'
        var13 = var11.get_name()
        assert var13 == 'Unknown'
        var14 = var11.get_vector()
        assert var14 == 'CVSS:3.1/AV:None/AC:None/PR:None/UI:None/S:None/C:None/I:None/A:None/E:X/RL:X/RC:X/CR:X/IR:X/AR:X/MAV:X/MAC:X/MPR:X/MUI:X/MS:X/MC:X/MI:X/MA:X'
        var15 = var11.get_env_score()
        assert var15 is None
        var16 = module0.Vulnerability()
        assert var16 is not None
        var17 = var16.get_asset()
        assert var17 == 'Unknown'
        var18 = None
        var19 = {var16: var18, var18: var17, var16: var17}
        var20 = '8g~Pxy4pN69y=s'
        var21 = {var17, var20}
        var22 = var19, var16, var21
        var23 = var16.set_asset(var22)
        assert var23 is None
        var24 = module0.Vulnerability()
        assert var24 is not None
        var25 = var24.get_asset()
        assert var25 == 'Unknown'
        var26 = None
        var27 = {var24: var26, var26: var25, var24: var25}
        var28 = '8g~Pxy4pN69y=s'
        var29 = {var25, var28}
        var30 = var27, var24, var29
        var31 = var24.set_asset(var30)
        assert var31 is None
        var32 = var24.get_base_vector()
        assert var32 == 'AV:None/AC:None/PR:None/UI:None/S:None/C:None/I:None/A:None'
        var33 = module0.Vulnerability()
        assert var33 is not None
        var34 = var33.get_asset()
        assert var34 == 'Unknown'
        var35 = var33.get_name()
        assert var35 == 'Unknown'
        var36 = module0.Vulnerability()
        assert var36 is not None
        var37 = var36.get_asset()
        assert var37 == 'Unknown'
        var38 = "u3$;EA;'V\t"
        var39 = var33.set_asset(var38)
        assert var39 is None
        var40 = module0.Vulnerability()
        assert var40 is not None
        var41 = var40.get_asset()
        assert var41 == 'Unknown'
        var42 = var40.get_name()
        assert var42 == 'Unknown'
        var43 = '2'
        var44 = [var43, var2, var7]
        var45 = var36.set_vector(var44)
    except BaseException:
        pass


def test_case_20():
    try:
        var0 = module0.Vulnerability()
        assert var0 is not None
        var1 = var0.get_asset()
        assert var1 == 'Unknown'
        var2 = var0.get_name()
        assert var2 == 'Unknown'
        var3 = var0.get_vector()
        assert var3 == 'CVSS:3.1/AV:None/AC:None/PR:None/UI:None/S:None/C:None/I:None/A:None/E:X/RL:X/RC:X/CR:X/IR:X/AR:X/MAV:X/MAC:X/MPR:X/MUI:X/MS:X/MC:X/MI:X/MA:X'
        var4 = module0.Vulnerability()
        assert var4 is not None
        var5 = var4.get_temp_vector()
        assert var5 == 'E:X/RL:X/RC:X'
        var6 = module0.Vulnerability()
        assert var6 is not None
        var7 = var6.get_env_vector()
        assert var7 == 'CR:X/IR:X/AR:X/MAV:X/MAC:X/MPR:X/MUI:X/MS:X/MC:X/MI:X/MA:X'
        var8 = 2542
        var9 = var6.set_name(var8)
        assert var9 is None
        var10 = module0.Vulnerability()
        assert var10 is not None
        var11 = True
        var12 = var10.set_asset(var11)
        assert var12 is None
        var13 = None
        var14 = '\x0bn+|mOan)mPB}\\s#$\\*'
        var15 = {var13, var14, var14}
        var16 = module0.Vulnerability()
        assert var16 is not None
        var17 = var16.set_metric(var13, var15)
        assert var17 is None
        var18 = module0.Vulnerability()
        assert var18 is not None
        var19 = ()
        var20 = {var4: var16, var18: var12}
        var21 = module0.round_up(var19, var20)
    except BaseException:
        pass


def test_case_21():
    try:
        var0 = module0.Vulnerability()
        assert var0 is not None
        var1 = var0.get_env_vector()
        assert var1 == 'CR:X/IR:X/AR:X/MAV:X/MAC:X/MPR:X/MUI:X/MS:X/MC:X/MI:X/MA:X'
        var2 = module0.Vulnerability()
        assert var2 is not None
        var3 = var2.get_env_vector()
        assert var3 == 'CR:X/IR:X/AR:X/MAV:X/MAC:X/MPR:X/MUI:X/MS:X/MC:X/MI:X/MA:X'
        var4 = module0.Vulnerability()
        assert var4 is not None
        var5 = var4.get_asset()
        assert var5 == 'Unknown'
        var6 = var4.get_name()
        assert var6 == 'Unknown'
        var7 = var4.get_vector()
        assert var7 == 'CVSS:3.1/AV:None/AC:None/PR:None/UI:None/S:None/C:None/I:None/A:None/E:X/RL:X/RC:X/CR:X/IR:X/AR:X/MAV:X/MAC:X/MPR:X/MUI:X/MS:X/MC:X/MI:X/MA:X'
        var8 = False
        var9 = module0.round_up(var8)
        assert var9 == pytest.approx(0.0, abs=0.01, rel=0.01)
        var10 = var4.get_temp_vector()
        assert var10 == 'E:X/RL:X/RC:X'
        var11 = '\ny'
        var12 = module0.round_up(var11)
    except BaseException:
        pass


def test_case_22():
    try:
        var0 = module0.Vulnerability()
        assert var0 is not None
        var1 = var0.get_asset()
        assert var1 == 'Unknown'
        var2 = var0.get_name()
        assert var2 == 'Unknown'
        var3 = module0.Vulnerability()
        assert var3 is not None
        var4 = var3.get_asset()
        assert var4 == 'Unknown'
        var5 = "u3$;EA;'V\t"
        var6 = var0.set_asset(var5)
        assert var6 is None
        var7 = module0.Vulnerability()
        assert var7 is not None
        var8 = var7.get_env_vector()
        assert var8 == 'CR:X/IR:X/AR:X/MAV:X/MAC:X/MPR:X/MUI:X/MS:X/MC:X/MI:X/MA:X'
        var9 = module0.Vulnerability()
        assert var9 is not None
        var10 = var9.get_asset()
        assert var10 == 'Unknown'
        var11 = var9.get_name()
        assert var11 == 'Unknown'
        var12 = var9.get_vector()
        assert var12 == 'CVSS:3.1/AV:None/AC:None/PR:None/UI:None/S:None/C:None/I:None/A:None/E:X/RL:X/RC:X/CR:X/IR:X/AR:X/MAV:X/MAC:X/MPR:X/MUI:X/MS:X/MC:X/MI:X/MA:X'
        var13 = False
        var14 = module0.round_up(var13)
        assert var14 == pytest.approx(0.0, abs=0.01, rel=0.01)
        var15 = var9.get_temp_vector()
        assert var15 == 'E:X/RL:X/RC:X'
        var16 = module0.Vulnerability()
        assert var16 is not None
        var17 = var16.get_asset()
        assert var17 == 'Unknown'
        var18 = var16.get_name()
        assert var18 == 'Unknown'
        var19 = var16.get_vector()
        assert var19 == 'CVSS:3.1/AV:None/AC:None/PR:None/UI:None/S:None/C:None/I:None/A:None/E:X/RL:X/RC:X/CR:X/IR:X/AR:X/MAV:X/MAC:X/MPR:X/MUI:X/MS:X/MC:X/MI:X/MA:X'
        var20 = var16.get_env_score()
        assert var20 is None
        var21 = module0.Vulnerability()
        assert var21 is not None
        var22 = var21.get_asset()
        assert var22 == 'Unknown'
        var23 = var21.get_name()
        assert var23 == 'Unknown'
        var24 = module0.Vulnerability()
        assert var24 is not None
        var25 = {var19, var11, var5}
        var26 = [var16, var10, var23, var18]
        var27 = var7.set_metric(var25, var26)
    except BaseException:
        pass


def test_case_23():
    try:
        var0 = module0.Vulnerability()
        assert var0 is not None
        var1 = var0.get_temp_vector()
        assert var1 == 'E:X/RL:X/RC:X'
        var2 = module0.Vulnerability()
        assert var2 is not None
        var3 = module0.Vulnerability()
        assert var3 is not None
        var4 = var3.get_asset()
        assert var4 == 'Unknown'
        var5 = var3.get_name()
        assert var5 == 'Unknown'
        var6 = module0.Vulnerability()
        assert var6 is not None
        var7 = var6.get_asset()
        assert var7 == 'Unknown'
        var8 = "u3$;EA;'V\t"
        var9 = var3.set_asset(var8)
        assert var9 is None
        var10 = module0.Vulnerability()
        assert var10 is not None
        var11 = var10.get_asset()
        assert var11 == 'Unknown'
        var12 = None
        var13 = {var10: var12, var12: var11, var10: var11}
        var14 = '8g~Pxy4pN69y=s'
        var15 = {var11, var14}
        var16 = var13, var10, var15
        var17 = var10.set_asset(var16)
        assert var17 is None
        var18 = var10.get_base_vector()
        assert var18 == 'AV:None/AC:None/PR:None/UI:None/S:None/C:None/I:None/A:None'
        var19 = module0.round_up(var16)
    except BaseException:
        pass


def test_case_24():
    try:
        var0 = b'\xd4'
        var1 = module0.Vulnerability()
        assert var1 is not None
        var2 = var1.set_asset(var0)
        assert var2 is None
        var3 = var1.get_name()
        assert var3 == 'Unknown'
        var4 = module0.Vulnerability()
        assert var4 is not None
        var5 = var4.get_vector()
        assert var5 == 'CVSS:3.1/AV:None/AC:None/PR:None/UI:None/S:None/C:None/I:None/A:None/E:X/RL:X/RC:X/CR:X/IR:X/AR:X/MAV:X/MAC:X/MPR:X/MUI:X/MS:X/MC:X/MI:X/MA:X'
        var6 = var4.get_base_vector()
        assert var6 == 'AV:None/AC:None/PR:None/UI:None/S:None/C:None/I:None/A:None'
        var7 = var1.get_env_vector()
        assert var7 == 'CR:X/IR:X/AR:X/MAV:X/MAC:X/MPR:X/MUI:X/MS:X/MC:X/MI:X/MA:X'
        var8 = module0.Vulnerability()
        assert var8 is not None
        var9 = var8.get_temp_vector()
        assert var9 == 'E:X/RL:X/RC:X'
        var10 = module0.Vulnerability()
        assert var10 is not None
        var11 = module0.Vulnerability()
        assert var11 is not None
        var12 = var11.get_temp_vector()
        assert var12 == 'E:X/RL:X/RC:X'
        var13 = module0.Vulnerability()
        assert var13 is not None
        var14 = var13.get_asset()
        assert var14 == 'Unknown'
        var15 = module0.Vulnerability()
        assert var15 is not None
        var16 = var15.get_env_vector()
        assert var16 == 'CR:X/IR:X/AR:X/MAV:X/MAC:X/MPR:X/MUI:X/MS:X/MC:X/MI:X/MA:X'
        var17 = 2542
        var18 = var15.set_name(var17)
        assert var18 is None
        var19 = var13.get_base_score()
        assert var19 is None
        var20 = var10.get_metric(var0)
    except BaseException:
        pass


def test_case_25():
    try:
        var0 = module0.Vulnerability()
        assert var0 is not None
        var1 = var0.get_env_vector()
        assert var1 == 'CR:X/IR:X/AR:X/MAV:X/MAC:X/MPR:X/MUI:X/MS:X/MC:X/MI:X/MA:X'
        var2 = 2542
        var3 = var0.set_name(var2)
        assert var3 is None
        var4 = module0.Vulnerability()
        assert var4 is not None
        var5 = var4.get_temp_vector()
        assert var5 == 'E:X/RL:X/RC:X'
        var6 = module0.Vulnerability()
        assert var6 is not None
        var7 = var6.get_temp_score()
        assert var7 is None
        var8 = module0.Vulnerability()
        assert var8 is not None
        var9 = module0.Vulnerability()
        assert var9 is not None
        var10 = var9.get_env_vector()
        assert var10 == 'CR:X/IR:X/AR:X/MAV:X/MAC:X/MPR:X/MUI:X/MS:X/MC:X/MI:X/MA:X'
        var11 = 2542
        var12 = var9.set_name(var11)
        assert var12 is None
        var13 = module0.Vulnerability()
        assert var13 is not None
        var14 = True
        var15 = var13.set_asset(var14)
        assert var15 is None
        var16 = var13.get_temp_score()
        assert var16 is None
        var17 = module0.Vulnerability()
        assert var17 is not None
        var18 = var17.get_vector()
        assert var18 == 'CVSS:3.1/AV:None/AC:None/PR:None/UI:None/S:None/C:None/I:None/A:None/E:X/RL:X/RC:X/CR:X/IR:X/AR:X/MAV:X/MAC:X/MPR:X/MUI:X/MS:X/MC:X/MI:X/MA:X'
        var19 = b'\xd4'
        var20 = module0.Vulnerability()
        assert var20 is not None
        var21 = var20.set_asset(var19)
        assert var21 is None
        var22 = var20.get_name()
        assert var22 == 'Unknown'
        var23 = module0.Vulnerability()
        assert var23 is not None
        var24 = var23.get_vector()
        assert var24 == 'CVSS:3.1/AV:None/AC:None/PR:None/UI:None/S:None/C:None/I:None/A:None/E:X/RL:X/RC:X/CR:X/IR:X/AR:X/MAV:X/MAC:X/MPR:X/MUI:X/MS:X/MC:X/MI:X/MA:X'
        var25 = var23.get_base_vector()
        assert var25 == 'AV:None/AC:None/PR:None/UI:None/S:None/C:None/I:None/A:None'
        var26 = var20.get_env_vector()
        assert var26 == 'CR:X/IR:X/AR:X/MAV:X/MAC:X/MPR:X/MUI:X/MS:X/MC:X/MI:X/MA:X'
        var27 = module0.Vulnerability()
        assert var27 is not None
        var28 = var27.get_temp_score()
        assert var28 is None
        var29 = module0.Vulnerability()
        assert var29 is not None
        var30 = var29.get_temp_vector()
        assert var30 == 'E:X/RL:X/RC:X'
        var31 = module0.Vulnerability()
        assert var31 is not None
        var32 = module0.Vulnerability()
        assert var32 is not None
        var33 = var32.get_vector()
        assert var33 == 'CVSS:3.1/AV:None/AC:None/PR:None/UI:None/S:None/C:None/I:None/A:None/E:X/RL:X/RC:X/CR:X/IR:X/AR:X/MAV:X/MAC:X/MPR:X/MUI:X/MS:X/MC:X/MI:X/MA:X'
        var34 = var32.get_base_vector()
        assert var34 == 'AV:None/AC:None/PR:None/UI:None/S:None/C:None/I:None/A:None'
        var35 = module0.Vulnerability()
        assert var35 is not None
        var36 = var35.get_asset()
        assert var36 == 'Unknown'
        var37 = module0.Vulnerability()
        assert var37 is not None
        var38 = var37.get_env_vector()
        assert var38 == 'CR:X/IR:X/AR:X/MAV:X/MAC:X/MPR:X/MUI:X/MS:X/MC:X/MI:X/MA:X'
        var39 = 2542
        var40 = var37.set_name(var39)
        assert var40 is None
        var41 = var35.get_base_score()
        assert var41 is None
        var42 = -1603.9
        var43 = var31.set_vector(var42)
    except BaseException:
        pass
