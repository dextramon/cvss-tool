
import re 
import math

#round-up 
def round_up(n, decimals=0):
    multiplier = 10 ** decimals
    return math.ceil(n * multiplier) / multiplier

class Vulnerability: 
    def __init__(self): 
        self._name = "Unknown"
        self._asset = "Unknown"
        self._total_score = None
        self._tv = {"AV": None, "AC": None, "PR": None, "UI": None, "S": None, "C": None, "I": None, "A": None,
                    "E": "X", "RL": "X", "RC": "X", "CR": "X", "IR": "X", "AR": "X", "MAV": "X", "MAC": "X", 
                    "MPR": "X", "MUI": "X", "MS": "X", "MC": "X", "MI": "X", "MA": "X"} 
        self._base_score = None
        self._temp_score = None
        self._env_score = None

    def _calculate_base_score(self): 
        AVV = {"L": 0.55, "A": 0.62, "N": 0.85, "P": 0.2}
        ACV = {"H": 0.44, "L": 0.77}
        PRV = {"H": 0.27, "L": 0.62, "N": 0.85}
        UIV = {"N": 0.85, "R": 0.62}
        # CONTAINS CONFINDENTIALITY, INTEGRITY AND AVAILABILITY
        AVAILABILITY_VALUE = {"H": 0.56, "L": 0.22, "N": 0}

        #impact sub-score
        iss = 1 - ((1-AVAILABILITY_VALUE[self._tv["C"]])*(1-AVAILABILITY_VALUE[self._tv["I"]])*(1-AVAILABILITY_VALUE[self._tv["A"]]))
        impact = 0 

        if(self._tv["S"] == "U"):
            impact = 6.42*iss

        if(self._tv["S"] == "C"):
            impact = 7.52*(iss-0.029)-3.25*pow((iss-0.02), 15)
            # H and L are changing their value if scope is changed
            PRV = {"N": 0.85, "L": 0.68, "H": 0.5}

        exploitability = 8.22*AVV[self._tv["AV"]]*ACV[self._tv["AC"]]*PRV[self._tv["PR"]]*UIV[self._tv["UI"]]

        if impact <= 0: 
            self._base_score = 0
        elif self._tv["S"] == "U": 
            self._base_score = round_up((impact+exploitability), 1)
        elif self._tv["S"] == "C": 
            self._base_score = round_up((1.08*(impact+exploitability)), 1)
        else: 
            raise Exception

    def _calculate_temp_score(self): 
        ECMV = {
            "X": 1, "U": 0.91, "P": 0.94, "F": 0.97, "H": 1}
        RLV = {
            "X": 1, "O": 0.95, "T": 0.96, "W": 0.97, "U": 1}
        RCV = {"X": 1, "U": 0.92, "R": 0.96, "C": 1}
        print("METRIC")
        print(round_up(( self._base_score * ECMV[self._tv["E"]] * RLV[self._tv["RL"]] * RCV[self._tv["RC"]] ), 1))
        self._temp_score = round_up(( self._base_score * ECMV[self._tv["E"]] * RLV[self._tv["RL"]] * RCV[self._tv["RC"]] ), 1)

    def _calculate_env_score(self):
        #attack vector value old
        AVVO = {"L": 0.55, "A": 0.62, "N": 0.85, "P": 0.2}
        ACVO = {"H": 0.44, "L": 0.77}
        PRVO = {"H": 0.27, "L": 0.62, "N": 0.85}
        UIVO = {"N": 0.85, "R": 0.62}
        # CONTAINS CONFINDENTIALITY, INTEGRITY AND AVAILABILITY
        AVO = {"H": 0.56, "L": 0.22, "N": 0}

        AVV = {"X": AVVO[self._tv["AV"]], "L": 0.55, "A": 0.62, "N": 0.85, "P": 0.2}
        ACV = {"X": ACVO[self._tv["AC"]], "H": 0.44, "L": 0.77}
        PRV = {"X": PRVO[self._tv["PR"]], "H": 0.27, "L": 0.62, "N": 0.85}
        UIV = {"X": UIVO[self._tv["UI"]],"N": 0.85, "R": 0.62}
        AV = {"X": AVO[self._tv["A"]],"H": 0.56, "L": 0.22, "N": 0}
        IV = {"X": AVO[self._tv["I"]],"H": 0.56, "L": 0.22, "N": 0}
        CV = {"X": AVO[self._tv["C"]],"H": 0.56, "L": 0.22, "N": 0}
        ARV = {"X": 1.0, "H": 1.5, "M": 1.0, "L": 0.5}
        ECMV = {
            "X": 1, "U": 0.91, "P": 0.94, "F": 0.97, "H": 1}
        RLV = {
            "X": 1, "O": 0.95, "T": 0.96, "W": 0.97, "U": 1}
        RCV = {"X": 1, "U": 0.92, "R": 0.96, "C": 1}

        PRVO = None

        if( ( self._tv["MS"] == "U" ) or ( self._tv["S"] == "U" and self._tv["MS"] == "X" ) ): 
            PRVO = {"H": 0.27, "L": 0.62, "N": 0.85}
        else:
            PRVO = {"H": 0.5, "L": 0.68, "N": 0.85}

        miss = 1 - ( ( 1-ARV[self._tv["CR"]] * CV[self._tv["MC"]] )  * ( 1-ARV[self._tv["IR"]] * IV[self._tv["MI"]] ) * ( 1-ARV[self._tv["AR"]] * AV[self._tv["MA"]] ))

        modified_impact = 0
        if( ( self._tv["MS"] == "U" ) or ( self._tv["S"] == "U" and self._tv["MS"] == "X" ) ): 
            modified_impact = 6.42*miss
        
        if(( self._tv["MS"] == "C" ) or ( self._tv["S"] == "C" and self._tv["MS"] == "X" ) ): 
            modified_impact = 7.52*(miss-0.029)-3.25*pow((miss*0.9731-0.02), 13)
            # H and L are changing their value if scope is changed
            PRV = {"X": PRVO[self._tv["PR"]], "H": 0.5, "L": 0.68, "N": 0.85}


        modified_exploitability = 8.22*AVV[self._tv["MAV"]]*ACV[self._tv["MAC"]]*PRV[self._tv["MPR"]]*UIV[self._tv["MUI"]]

        if(modified_impact <= 0): 
            self._env_score = 0
        
        if(( self._tv["MS"] == "U" ) or ( self._tv["S"] == "U" and self._tv["MS"] == "X" ) ): 
            self._env_score = round_up((round_up((modified_impact+modified_exploitability),1)*ECMV[self._tv["E"]]*RLV[self._tv["RL"]]*RCV[self._tv["RC"]] ),1)

        if(( self._tv["MS"] == "C" ) or ( self._tv["S"] == "C" and self._tv["MS"] == "X" ) ): 
            self._env_score = round_up((round_up(1.08*(modified_impact+modified_exploitability),1)*ECMV[self._tv["E"]]*RLV[self._tv["RL"]]*RCV[self._tv["RC"]] ),1)

    def _is_valid(self, vector):

        input_vector = vector

        base_score= re.compile('AV:[LANP]/AC:[HL]/PR:[HLN]/UI:[NR]/S:[CU]/C:[NHL]/I:[NHL]/A:[NHL]')

        if(base_score.match(input_vector)):
            return True
        else: 
            return False

    def set_vector(self, vector): 
        if(self._is_valid(vector) == True): 
            all_parts = vector.split("/")

            for i in all_parts: 
                hel = i.split(":")
                self._tv[hel[0]] = hel[1]
            self._calculate_base_score()
        else: 
            raise ValueError


    def set_asset_name(self, value): 
        self._asset = value

    def get_asset_name(self): 
        return self._asset

    def set_metric(self, key_name, key_value):
        base_score_values = {"AV": "LANP", "AC": "HL", "PR": "HLN", "UI": "NR", "S": "UC", "C": "HLN", "I": "HLN", "A":"HLN"} 
        temp_scores = {'E': 'XUPFH', 'RL': 'XOTWU', 'RC': 'XURC'}
        env_scores = {'CR': 'XHLM', 'IR': 'XHLM', 'AR': 'XHLM', 'MAV': 'XLANP', 'MAC': 'XHL', 'MPR': 'XHLN', 'MUI': 'XNR', 'MS': 'XUC', 'MC': 'XHLN', 'MI': 'XHLN', 'MA': 'XHLN'}

        if key_name in base_score_values: 
            if key_value in base_score_values[key_name]:
                self._tv[key_name] = key_value
                self._calculate_base_score()
            else: 
                raise ValueError
        elif key_name in temp_scores:
            if key_value in temp_scores[key_name]:
                self._tv[key_name] = key_value
                print(key_name)
                if(self._tv["E"] == "X" and self._tv["RC"] == "X" and self._tv["RL"] == "X" ):
                    self._temp_score = None
                else: 
                    self._calculate_temp_score()
            else: 
                raise ValueError
                
        elif key_name in env_scores: 
            if key_value in env_scores[key_name]:
                self._tv[key_name] = key_value
                if(self._tv["CR"] == "X" and self._tv["IR"] == "X" and self._tv["AR"] == "X" and 
                    self._tv["MAV"] == "X" and self._tv["MAC"] == "X" and self._tv["MPR"] == "X" and
                    self._tv["MUI"] == "X" and self._tv["MS"] == "X" and self._tv["MC"] == "X" and self._tv["MI"] =="X" and self._tv["MA"] == "X"):
                    self._env_score = None
                else:
                    self._calculate_env_score()
            else: 
                raise ValueError
        else: 
            raise KeyError

    def get_metric(self, name): 
        return self._tv[name] 

    def get_vector(self): 
        vector = "CVSS:3.1"
        for key in self._tv: 
            vector += f"/{key}:{self._tv[key]}"
        return vector

    def set_vulnerability_name(self, name): 
        self._name = name

    def get_vulnerability_name(self):
        return self._name
        
    def get_base_score(self): 
        return self._base_score

    def get_temp_score(self): 
        return self._temp_score

    def get_env_score(self): 
        return self._env_score

    def get_base_vector(self): 
        return f'AV:{self._tv["AV"]}/AC:{self._tv["AC"]}/PR:{self._tv["PR"]}/UI:{self._tv["UI"]}/S:{self._tv["S"]}/C:{self._tv["C"]}/I:{self._tv["I"]}/A:{self._tv["A"]}'

    def get_temp_vector(self): 
        return f'E:{self._tv["E"]}/RL:{self._tv["RL"]}/RC:{self._tv["RC"]}'

    def get_env_vector(self): 
        return f'CR:{self._tv["CR"]}/IR:{self._tv["IR"]}/AR:{self._tv["AR"]}/MAV:{self._tv["MAV"]}/MAC:{self._tv["MAC"]}/MPR:{self._tv["MPR"]}/MUI:{self._tv["MUI"]}/MS:{self._tv["MS"]}/MC:{self._tv["MC"]}/MI:{self._tv["MI"]}/MA:{self._tv["MA"]}'

    def get_total_score(self):
        if self._env_score != None: 
            return self._env_score
        if self._temp_score != None:
            return self._temp_score
        return self._base_score
