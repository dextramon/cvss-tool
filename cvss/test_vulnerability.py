
import unittest
from vulnerability import Vulnerability

class TestVulnerability(unittest.TestCase):

    def setUp(self) -> None:
        self.v1 = Vulnerability()
        self.v1.set_vector("AV:A/AC:H/PR:L/UI:R/S:U/C:L/I:L/A:L")
        self.v1.set_metric("E","P")
        self.v1.set_metric("RL", "T")
        self.v1.set_metric("RC", "X")
        self.v1.set_metric("MAC", "H")
        self.v1.set_metric("MUI", "R")
        self.v1.set_metric("MI", "N")
        # AV:A/AC:H/PR:L/UI:R/S:U/C:L/I:L/A:L/E:P/RL:T/RC:X/CR:X/IR:X/AR:X/MAV:X/MAC:H/MPR:X/MUI:R/MS:X/MC:X/MI:N/MA:X 4.3 3.9 3.1
        self.v2 = Vulnerability()
        self.v2.set_vector("AV:N/AC:H/PR:L/UI:R/S:U/C:N/I:N/A:L")
        self.v2.set_metric("RL", "U")
        self.v2.set_metric("CR", "L")
        self.v2.set_metric("IR", "L")
        self.v2.set_metric("MAV", "A")
        self.v2.set_metric("MAC", "H")
        self.v2.set_metric("MPR", "N")
        self.v2.set_metric("MUI", "R")
        self.v2.set_metric("MS", "U")
        # AV:N/AC:H/PR:L/UI:R/S:U/C:N/I:N/A:L/E:X/RL:U/RC:X/CR:L/IR:L/AR:X/MAV:A/MAC:H/MPR:N/MUI:R/MS:U/MC:X/MI:X/MA:X 2.6 2.6 2.6
        self.v3 = Vulnerability()
        self.v3.set_vector("AV:L/AC:H/PR:L/UI:N/S:U/C:L/I:L/A:H")
        self.v3.set_metric("E", "P")
        self.v3.set_metric("AR", "H")
        self.v3.set_metric("MPR", "H")
        self.v3.set_metric("MUI", "N")
        self.v3.set_metric("MS", "U")
        # AV:L/AC:H/PR:L/UI:N/S:U/C:L/I:L/A:H/E:P/RL:X/RC:X/CR:X/IR:X/AR:H/MAV:X/MAC:X/MPR:H/MUI:N/MS:U/MC:X/MI:X/MA:X 5.8 5.5 6.0
        self.v4 = Vulnerability()
        self.v4.set_vector("AV:N/AC:H/PR:N/UI:R/S:C/C:N/I:N/A:H")
        self.v4.set_metric("E", "P")
        self.v4.set_metric("RL", "U")
        self.v4.set_metric("AR", "H")
        self.v4.set_metric("MUI", "R")
        self.v4.set_metric("MS", "U")
        self.v4.set_metric("MC", "L")
        self.v4.set_metric("MI", "N")
        self.v4.set_metric("MA", "N")
        # AV:N/AC:H/PR:N/UI:R/S:C/C:N/I:N/A:H/E:P/RL:U/RC:X/CR:X/IR:X/AR:H/MAV:X/MAC:X/MPR:X/MUI:R/MS:U/MC:L/MI:N/MA:N 6.1 5.8 3.0
        self.v5 = Vulnerability()
        self.v5.set_vector("AV:L/AC:L/PR:H/UI:R/S:C/C:H/I:L/A:H")
        self.v5.set_metric("E", "P")
        self.v5.set_metric("RL", "O")
        self.v5.set_metric("IR", "M")
        self.v5.set_metric("MAV", "N")
        self.v5.set_metric("MAC", "H")
        self.v5.set_metric("MC", "L")
        self.v5.set_metric("MA", "N")
        # AV:L/AC:L/PR:H/UI:R/S:C/C:H/I:L/A:H/E:P/RL:O/RC:X/CR:X/IR:M/AR:X/MAV:N/MAC:H/MPR:X/MUI:X/MS:X/MC:L/MI:X/MA:N 7.7 6.9 3.6
        self.v6 = Vulnerability()
        self.v6.set_vector("AV:L/AC:H/PR:N/UI:R/S:U/C:N/I:H/A:H")
        self.v6.set_metric("RL", "W")
        self.v6.set_metric("RC", "R")
        self.v6.set_metric("IR", "M")
        self.v6.set_metric("MAV", "N")
        self.v6.set_metric("MAC", "H")
        self.v6.set_metric("MPR", "L")
        self.v6.set_metric("MUI", "N")
        self.v6.set_metric("MC", "L")
        self.v6.set_metric("MI", "L")
        self.v6.set_metric("MA", "L")
        # AV:L/AC:H/PR:N/UI:R/S:U/C:N/I:H/A:H/E:X/RL:W/RC:R/CR:X/IR:M/AR:X/MAV:N/MAC:H/MPR:L/MUI:N/MS:X/MC:L/MI:L/MA:L 6.3 5.9 4.7
        self.v7 = Vulnerability()
        self.v7.set_vector("AV:A/AC:L/PR:H/UI:R/S:C/C:H/I:L/A:N")
        self.v7.set_metric("RL", "U")
        self.v7.set_metric("RC", "U")
        self.v7.set_metric("MAV", "N")
        self.v7.set_metric("MUI", "N")
        self.v7.set_metric("MA", "L")
        # AV:A/AC:L/PR:H/UI:R/S:C/C:H/I:L/A:N/E:X/RL:U/RC:U/CR:X/IR:X/AR:X/MAV:N/MAC:X/MPR:X/MUI:N/MS:X/MC:X/MI:X/MA:L 6.5 6.0 7.6
        self.v8 = Vulnerability()
        self.v8.set_vector("AV:L/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:H")
        self.v8.set_metric("E", "F")
        self.v8.set_metric("RL", "T")
        self.v8.set_metric("IR", "L")
        self.v8.set_metric("MAV", "N")
        self.v8.set_metric("MAC", "L")
        self.v8.set_metric("MUI", "N")
        self.v8.set_metric("MC", "L")
        self.v8.set_metric("MI", "N")
        self.v8.set_metric("MA", "L")
        # AV:L/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:H/E:F/RL:T/RC:X/CR:X/IR:L/AR:X/MAV:N/MAC:L/MPR:X/MUI:N/MS:X/MC:L/MI:N/MA:L 7.0 6.6 5.1
        self.v9 = Vulnerability()
        self.v9.set_vector("AV:A/AC:L/PR:H/UI:R/S:U/C:L/I:N/A:N")
        self.v9.set_metric("E", "U")
        self.v9.set_metric("RL", "O")
        self.v9.set_metric("IR", "L")
        self.v9.set_metric("MAV", "N")
        self.v9.set_metric("MAC", "L")
        self.v9.set_metric("MUI", "R")
        self.v9.set_metric("MI", "L")
        # AV:A/AC:L/PR:H/UI:R/S:U/C:L/I:N/A:N/E:U/RL:O/RC:X/CR:X/IR:L/AR:X/MAV:N/MAC:L/MPR:X/MUI:R/MS:X/MC:X/MI:L/MA:X 2.1 1.9 2.6
        self.v10 = Vulnerability()
        self.v10.set_vector("AV:P/AC:H/PR:N/UI:R/S:C/C:H/I:H/A:N")
        self.v10.set_metric("RL", "W")
        self.v10.set_metric("IR", "L")
        self.v10.set_metric("CR", "H")
        self.v10.set_metric("MAV", "N")
        self.v10.set_metric("MAC", "H")
        self.v10.set_metric("MPR", "H")
        self.v10.set_metric("MUI", "R")
        self.v10.set_metric("MC", "L")
        self.v10.set_metric("MI", "N")
        self.v10.set_metric("MA", "N")
        # AV:P/AC:H/PR:N/UI:R/S:C/C:H/I:H/A:N/E:X/RL:W/RC:X/CR:H/IR:L/AR:X/MAV:N/MAC:H/MPR:H/MUI:R/MS:X/MC:L/MI:N/MA:N 6.7 6.5 3.4
    
    def test_enter_wrong_metric_for_base_score(self):
        v_wrong = Vulnerability()
        self.assertRaises(ValueError, v_wrong.set_vector, "AV:N/AC:H/PR:L/UI:R/S:U/C:L/I:X/A:L")

    def test_enter_wrong_order_for_base_score(self):
        v_wrong = Vulnerability()
        self.assertRaises(ValueError, v_wrong.set_vector, "AV:A/AC:H/PR:L/UI:R/S:U/C:L/A:L")

    def test_enter_more_more_than_base_score(self):
        v_wrong = Vulnerability()
        self.assertRaises(ValueError, v_wrong.set_vector, "AV:A/AC:H/PR:L/UI:R/S:U/C:L:I:X/A:L/MAV/AC")

    def test_enter_base_score_in_wrong_order(self):
        v_wrong = Vulnerability()
        self.assertRaises(ValueError, v_wrong.set_vector, "AV:A/AC:H/PR:L/UI:R/S:U/I:L/C:L/A:L")
    
    def test_enter_wrong_metric_value(self):
        v_wrong = Vulnerability()
        self.assertRaises(ValueError, v_wrong.set_metric, "AV", "K")

    def test_enter_wrong_metric_key(self):
        v_wrong = Vulnerability()
        self.assertRaises(KeyError, v_wrong.set_metric, "AX", "N")

    def test_get_environmental_score(self):
        #self.assertEqual(self.v1.get_env_score(), 3.1)
        self.assertEqual(self.v2.get_env_score(), 2.6)
        self.assertEqual(self.v3.get_env_score(), 6.0)
        self.assertEqual(self.v4.get_env_score(), 3.0)
        self.assertEqual(self.v5.get_env_score(), 3.6)
        self.assertEqual(self.v6.get_env_score(), 4.7)
        self.assertEqual(self.v7.get_env_score(), 7.6)
        self.assertEqual(self.v8.get_env_score(), 5.1)
        self.assertEqual(self.v9.get_env_score(), 2.6)
        self.assertEqual(self.v10.get_env_score(), 3.4)


    def test_get_temporal_score(self):
        #self.assertEqual(self.v1.get_temp_score(), 3.9)
        self.assertEqual(self.v2.get_temp_score(), 2.6)
        self.assertEqual(self.v3.get_temp_score(), 5.5)
        self.assertEqual(self.v4.get_temp_score(), 5.8)
        self.assertEqual(self.v5.get_temp_score(), 6.9)
        self.assertEqual(self.v6.get_temp_score(), 5.9)
        self.assertEqual(self.v7.get_temp_score(), 6.0)
        self.assertEqual(self.v8.get_temp_score(), 6.6)
        self.assertEqual(self.v9.get_temp_score(), 1.9)
        self.assertEqual(self.v10.get_temp_score(), 6.5)

    def test_get_base_score(self):
        #self.assertEqual(self.v1.get_base_score(), 4.3)
        self.assertEqual(self.v2.get_base_score(), 2.6)
        self.assertEqual(self.v3.get_base_score(), 5.8)
        self.assertEqual(self.v4.get_base_score(), 6.1)
        self.assertEqual(self.v5.get_base_score(), 7.7)
        self.assertEqual(self.v6.get_base_score(), 6.3)
        self.assertEqual(self.v7.get_base_score(), 6.5)
        self.assertEqual(self.v8.get_base_score(), 7.0)
        self.assertEqual(self.v9.get_base_score(), 2.1)
        self.assertEqual(self.v10.get_base_score(), 6.7)

    def test_total_score(self):
        #self.assertEqual(self.v1.get_total_score(), 3.1)
        self.assertEqual(self.v2.get_total_score(), 2.6)
        self.assertEqual(self.v3.get_total_score(), 6.0)
        self.assertEqual(self.v4.get_total_score(), 3.0)
        self.assertEqual(self.v5.get_total_score(), 3.6)
        self.assertEqual(self.v6.get_total_score(), 4.7)
        self.assertEqual(self.v7.get_total_score(), 7.6)
        self.assertEqual(self.v8.get_total_score(), 5.1)
        self.assertEqual(self.v9.get_total_score(), 2.6)
        self.assertEqual(self.v10.get_total_score(), 3.4)

if __name__ == "__main__": 
    unittest.main()