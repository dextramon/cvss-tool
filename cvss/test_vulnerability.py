
import unittest
from vulnerability import Vulnerability

class TestVulnerability(unittest.TestCase):

    def setUp(self) -> None:
        self.v1 = Vulnerability()
        self.v1.set_vector("AV:A/AC:H/PR:L/UI:R/S:U/C:L/I:L/A:L")
        self.v1.set_metric("E","P")
        self.v1.set_metric("RL", "T")
        self.v1.set_metric("RC", "X")
        self.v1.set_metric("MAC", "H")
        self.v1.set_metric("MUI", "R")
        self.v1.set_metric("MI", "N")
        # AV:A/AC:H/PR:L/UI:R/S:U/C:L/I:L/A:L/E:P/RL:T/RC:X/CR:X/IR:X/AR:X/MAV:X/MAC:H/MPR:X/MUI:R/MS:X/MC:X/MI:N/MA:X 4.3 3.9 3.1
        self.v2 = Vulnerability()
        self.v2.set_vector("AV:N/AC:H/PR:L/UI:R/S:U/C:N/I:N/A:L")
        # AV:N/AC:H/PR:L/UI:R/S:U/C:N/I:N/A:L/E:X/RL:U/RC:X/CR:L/IR:L/AR:X/MAV:A/MAC:H/MPR:N/MUI:R/MS:U/MC:X/MI:X/MA:X 2.6 2.6 2.6
        self.v3 = Vulnerability()
        v4 = Vulnerability()
        v5 = Vulnerability()
        v6 = Vulnerability()
        v7 = Vulnerability()
        v8 = Vulnerability()
        v9 = Vulnerability()
        v10 = Vulnerability()
    
    def test_enter_wrong_metric_for_base_score(self):
        v_wrong = Vulnerability()
        self.assertRaises(ValueError, v_wrong.set_vector, "AV:N/AC:H/PR:L/UI:R/S:U/C:L/I:X/A:L")

    def test_enter_wrong_order_for_base_score(self):
        v_wrong = Vulnerability()
        self.assertRaises(ValueError, v_wrong.set_vector, "AV:A/AC:H/PR:L/UI:R/S:U/C:L/A:L")

    def test_enter_more_more_than_base_score(self):
        v_wrong = Vulnerability()
        self.assertRaises(ValueError, v_wrong.set_vector, "AV:A/AC:H/PR:L/UI:R/S:U/C:L:I:X/A:L/MAV/AC")

    def test_enter_base_score_in_wrong_order(self):
        v_wrong = Vulnerability()
        self.assertRaises(ValueError, v_wrong.set_vector, "AV:A/AC:H/PR:L/UI:R/S:U/I:L/C:L/A:L")
    
    def test_enter_wrong_metric_value(self):
        v_wrong = Vulnerability()
        self.assertRaises(ValueError, v_wrong.set_metric, "AV", "K")

    def test_enter_wrong_metric_key(self):
        v_wrong = Vulnerability()
        self.assertRaises(KeyError, v_wrong.set_metric, "AX", "N")

    def test_get_environmental_score(self):
        self.assertEqual(self.v1.get_env_score(), 3.1)

    def test_get_temporal_score(self):
        self.assertEqual(self.v1.get_temp_score(), 3.9)

    def test_get_base_score(self):
        self.assertEqual(self.v1.get_base_score(), 4.3)
        self.assertEqual(self.v2.get_base_score(), 2.6)

    def test_total_score(self):
        self.assertEqual(self.v1.get_total_score(), 3.1)

if __name__ == "__main__": 
    unittest.main()